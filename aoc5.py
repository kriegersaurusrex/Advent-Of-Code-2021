source=[[941,230],[762,196],[656,197],[687,692],[37,953],[674,102],[952,323],[807,948],[280,66],[810,381],[41,278],[754,11],[499,830],[713,172],[805,54],[442,910],[160,170],[265,899],[960,976],[820,244],[883,501],[12,978],[988,46],[285,775],[718,69],[218,641],[857,277],[32,36],[964,280],[739,981],[960,794],[447,682],[813,103],[568,705],[888,47],[936,95],[305,349],[54,240],[28,704],[680,325],[209,405],[947,906],[149,810],[897,875],[928,267],[871,516],[954,725],[680,645],[680,326],[173,157],[842,802],[750,442],[567,891],[374,623],[979,725],[336,440],[214,213],[652,815],[220,48],[580,522],[286,685],[865,343],[738,898],[703,571],[792,368],[738,905],[646,95],[930,908],[310,933],[192,22],[245,803],[567,218],[148,950],[147,772],[774,84],[860,798],[856,131],[368,603],[587,533],[832,461],[164,709],[874,471],[346,237],[683,300],[353,717],[586,578],[27,813],[311,391],[369,304],[591,226],[634,545],[439,257],[42,791],[155,801],[599,603],[48,607],[199,828],[28,147],[799,563],[206,625],[185,330],[161,746],[932,13],[649,746],[463,169],[568,251],[739,692],[941,989],[513,356],[534,168],[447,563],[898,915],[339,405],[414,940],[591,741],[347,330],[186,40],[849,872],[406,620],[346,226],[609,40],[820,900],[201,63],[984,652],[193,204],[173,892],[389,675],[489,954],[18,82],[646,150],[618,805],[178,617],[179,30],[984,21],[172,167],[17,209],[814,945],[385,632],[126,41],[575,778],[74,270],[891,248],[95,426],[235,73],[730,302],[388,587],[525,155],[370,278],[950,150],[644,935],[798,515],[976,562],[674,350],[686,653],[691,278],[964,961],[735,582],[786,885],[402,732],[660,881],[683,383],[174,20],[692,819],[344,669],[562,126],[621,344],[731,892],[216,828],[990,534],[973,714],[25,981],[659,399],[967,885],[612,684],[955,485],[582,714],[342,203],[188,488],[659,65],[306,85],[975,847],[742,989],[917,524],[890,571],[901,791],[631,447],[850,28],[842,759],[659,538],[693,69],[161,515],[892,630],[78,947],[561,728],[138,842],[890,373],[509,370],[982,41],[184,210],[390,525],[387,151],[718,808],[206,234],[84,150],[336,468],[764,19],[752,607],[233,149],[368,612],[929,497],[829,274],[312,268],[519,18],[896,19],[368,727],[233,813],[477,758],[615,171],[38,461],[862,107],[271,52],[203,936],[96,700],[290,554],[377,923],[347,511],[889,412],[558,412],[45,838],[958,27],[154,244],[315,154],[135,618],[380,422],[314,500],[915,320],[213,772],[14,22],[444,759],[730,650],[532,551],[547,426],[868,191],[462,599],[729,709],[665,229],[880,947],[249,837],[575,205],[960,665],[617,853],[224,60],[226,741],[371,595],[371,708],[236,141],[55,509],[684,885],[93,509],[284,61],[438,353],[77,716],[283,769],[56,799],[804,637],[476,54],[686,400],[740,905],[21,113],[286,132],[923,378],[924,922],[801,609],[465,671],[628,235],[684,840],[841,366],[740,208],[657,370],[817,781],[308,894],[497,233],[35,145],[383,163],[620,985],[178,253],[556,51],[650,187],[161,988],[861,256],[46,555],[980,975],[345,751],[534,642],[901,240],[984,280],[578,663],[377,943],[975,38],[697,870],[147,520],[683,711],[825,26],[855,84],[558,945],[660,195],[889,696],[969,248],[598,625],[176,151],[939,70],[645,431],[502,518],[821,988],[361,850],[506,173],[323,151],[131,519],[164,445],[425,989],[18,739],[138,545],[401,104],[864,855],[636,361],[820,970],[866,859],[112,507],[529,494],[104,469],[82,841],[258,518],[34,917],[777,553],[64,952],[341,224],[87,128],[951,400],[344,963],[983,244],[938,771],[560,262],[46,386],[898,747],[239,929],[849,881],[204,204],[830,33],[304,339],[565,312],[387,523],[239,421],[197,433],[595,21],[547,171],[639,910],[908,185],[947,565],[211,670],[753,708],[36,147],[423,94],[613,680],[277,263],[186,413],[483,173],[25,771],[328,916],[267,604],[430,616],[692,463],[306,360],[736,948],[797,529],[492,486],[659,429],[582,503],[780,62],[58,318],[286,694],[248,241],[112,963],[771,722],[508,76],[435,307],[167,312],[721,407],[57,203],[83,239],[810,686],[817,268],[379,975],[597,38],[56,504],[108,587],[625,426],[248,486],[932,25],[388,613],[644,188],[871,425],[722,866],[96,579],[876,64],[581,633],[11,10],[947,55],[532,553],[898,855],[533,289],[497,736],[871,201],[550,686],[858,585],[380,171],[864,112],[791,857],[898,579],[479,713],[19,143],[347,161],[479,395],[929,37],[128,958],[921,18],[263,550],[155,592],[565,34],[913,371],[199,158],[98,775],[649,576],[801,855],[859,913],[274,487],[729,982],[664,827],[656,885],[916,74],[439,31],[423,753],[424,914],[980,723],[656,437],[577,654],[19,224],[310,181],[828,296],[905,151],[319,178],[972,939],[497,98],[987,402],[904,19],[265,885],[475,414],[610,93],[961,892],[297,600],[405,637],[439,874],[275,185],[220,840],[372,153],[896,964],[916,484],[485,355],[198,793],[614,735],[181,591],[175,289],[899,758],[506,647],[443,828],[623,641],[202,409],[486,751],[781,73],[911,643],[799,151],[716,815],[947,517],[704,260],[113,581],[408,252],[601,753],[851,424],[670,941],[480,839],[912,949],[477,39],[139,898],[93,386],[184,132],[247,557],[832,22],[61,814],[816,640],[214,561],[698,858]]
destination=[[322,849],[701,257],[595,136],[57,692],[903,87],[84,102],[786,157],[430,948],[514,66],[928,263],[112,207],[754,574],[725,604],[658,172],[594,54],[40,508],[925,935],[265,313],[77,93],[877,187],[345,501],[941,49],[988,572],[285,298],[121,69],[146,641],[124,277],[657,36],[609,280],[910,981],[243,794],[751,378],[813,240],[497,705],[888,231],[336,695],[18,636],[54,222],[625,107],[680,623],[209,123],[947,721],[834,125],[146,124],[928,484],[871,136],[706,725],[958,645],[908,326],[890,874],[166,126],[270,922],[567,784],[374,174],[765,511],[82,440],[939,938],[763,815],[331,159],[141,522],[286,779],[865,257],[405,565],[420,571],[792,955],[738,79],[737,95],[72,50],[310,243],[918,748],[81,639],[901,218],[965,133],[159,772],[774,960],[372,798],[856,703],[247,603],[301,533],[832,506],[960,709],[327,471],[346,921],[910,527],[353,575],[798,366],[27,434],[418,391],[33,304],[591,558],[513,545],[207,257],[581,252],[155,294],[599,182],[337,896],[506,828],[733,852],[799,22],[455,874],[335,480],[590,746],[269,13],[649,309],[930,636],[386,251],[233,692],[84,132],[513,628],[285,168],[447,698],[791,808],[432,405],[335,940],[59,741],[347,341],[438,292],[295,318],[938,620],[864,226],[478,171],[947,900],[201,107],[47,652],[776,204],[740,892],[709,355],[546,954],[587,651],[675,150],[618,592],[178,606],[505,30],[21,984],[15,167],[192,209],[814,18],[161,632],[474,389],[737,778],[147,270],[467,672],[95,728],[235,583],[730,466],[377,598],[184,155],[966,874],[444,656],[401,935],[506,807],[253,562],[603,421],[576,653],[593,180],[76,73],[735,389],[76,885],[231,732],[660,525],[683,364],[174,75],[107,819],[577,902],[697,261],[621,707],[213,374],[663,828],[990,356],[519,714],[983,23],[535,275],[183,101],[732,684],[955,806],[582,719],[905,203],[272,488],[659,679],[605,384],[975,353],[742,652],[934,524],[662,799],[901,118],[114,447],[797,28],[91,759],[253,944],[693,452],[789,515],[892,785],[931,947],[11,178],[138,133],[628,373],[592,370],[185,838],[184,218],[390,558],[387,39],[833,808],[206,620],[84,959],[307,468],[739,44],[643,607],[112,149],[725,255],[909,477],[829,190],[312,128],[519,552],[140,19],[368,114],[750,813],[477,213],[615,530],[301,461],[154,815],[271,517],[365,936],[13,617],[389,455],[377,890],[147,511],[762,412],[424,412],[45,845],[958,454],[20,244],[315,173],[135,71],[131,671],[314,873],[915,159],[977,772],[978,986],[444,385],[730,210],[633,652],[335,426],[156,903],[611,748],[729,714],[849,413],[880,159],[249,604],[196,584],[320,25],[412,853],[224,467],[226,47],[118,342],[371,561],[955,860],[55,938],[684,670],[497,105],[812,61],[242,353],[363,430],[905,147],[551,799],[804,526],[154,54],[686,145],[417,905],[823,915],[880,726],[771,378],[36,34],[801,407],[550,756],[628,842],[716,808],[495,712],[740,174],[657,731],[466,781],[308,370],[755,233],[35,398],[578,163],[620,849],[178,724],[556,525],[706,243],[599,550],[501,616],[181,555],[980,916],[479,617],[534,202],[901,490],[337,927],[578,298],[259,943],[39,974],[387,560],[218,520],[486,711],[122,729],[751,84],[989,945],[597,195],[317,696],[240,977],[598,148],[256,151],[648,70],[411,431],[221,518],[213,988],[684,850],[506,405],[726,151],[35,519],[798,445],[425,133],[684,73],[138,155],[766,104],[203,855],[604,361],[820,882],[835,859],[112,715],[529,928],[193,469],[831,92],[258,778],[135,917],[985,345],[719,297],[902,224],[525,566],[448,903],[21,963],[983,503],[635,771],[560,974],[75,386],[898,17],[149,929],[849,251],[204,753],[830,130],[42,339],[773,312],[234,523],[543,725],[197,723],[370,21],[480,104],[639,241],[560,185],[947,411],[588,293],[753,624],[859,970],[930,94],[607,680],[836,822],[827,413],[142,173],[409,387],[613,631],[724,147],[150,896],[50,463],[306,653],[736,174],[774,529],[492,812],[102,429],[695,616],[780,164],[387,318],[286,396],[248,361],[707,963],[636,722],[389,76],[201,541],[618,763],[305,823],[516,203],[83,607],[137,13],[101,984],[379,631],[611,38],[56,900],[261,740],[476,426],[643,881],[21,936],[388,296],[644,273],[871,791],[722,39],[96,97],[297,643],[59,633],[989,988],[266,736],[735,756],[83,40],[306,62],[332,571],[345,727],[256,686],[607,836],[15,171],[864,686],[305,857],[741,579],[113,713],[779,903],[140,368],[534,340],[77,889],[884,202],[921,650],[263,280],[235,592],[565,454],[173,371],[974,933],[98,234],[649,444],[548,855],[363,913],[274,654],[443,982],[77,240],[656,350],[284,706],[439,175],[280,753],[948,914],[980,674],[626,407],[423,654],[424,224],[704,575],[828,308],[955,151],[892,178],[65,32],[91,98],[943,446],[174,749],[265,835],[658,597],[938,93],[661,892],[378,600],[52,284],[439,612],[275,218],[220,735],[644,425],[896,461],[951,449],[456,355],[198,132],[561,735],[147,591],[159,289],[962,695],[506,858],[720,828],[623,631],[891,409],[80,345],[781,710],[911,571],[89,861],[810,815],[947,575],[704,727],[113,606],[408,761],[457,609],[501,774],[916,941],[205,564],[38,75],[925,487],[309,898],[93,194],[943,891],[247,182],[76,778],[806,69],[604,428],[623,152],[389,858]]

master_list = []
for i in range(0, 1000):
    temp_list = []
    for j in range(0, 1000):
        temp_list.append(0)
    master_list.append(temp_list)

#Plots current line of vents to the full grid based on source and destination lists (pt 1 solution is commenting out the diagonal line code block), then adds up the number of times at least two vents intersect one another
for i in range(0, len(source)):
    is_diag = True
    if(source[i][0] == destination[i][0]):
        if(source[i][1] > destination[i][1]):
            for j in range(destination[i][1], source[i][1]+1):
                master_list[j][source[i][0]] += 1
        if(source[i][1] < destination[i][1]):
            for j in range(source[i][1], destination[i][1]+1):
                master_list[j][source[i][0]] += 1
        is_diag = False
    if(source[i][1] == destination[i][1]):            
        if(source[i][0] > destination[i][0]):  
            for j in range(destination[i][0], source[i][0]+1):
                master_list[source[i][1]][j] += 1
        if(source[i][0] < destination[i][0]):
            for j in range(source[i][0], destination[i][0]+1):
                master_list[source[i][1]][j] += 1
        is_diag = False
    if(is_diag == True):
        temp_x = [0,0]
        temp_y = [0,0]
        if(source[i][0] < destination[i][0]):
            temp_x[0] = source[i][0]
            temp_x[1] = destination[i][0]
            if(source[i][1] > destination[i][1]):
                temp_y[0] = source[i][1]
                temp_y[1] = destination[i][1]
            if(source[i][1] < destination[i][1]):
                temp_y[0] = source[i][1]
                temp_y[1] = destination[i][1]
        if(source[i][0] > destination[i][0]):
            temp_x[0] = destination[i][0]
            temp_x[1] = source[i][0]
            if(source[i][1] > destination[i][1]):
                temp_y[0] = destination[i][1]
                temp_y[1] = source[i][1]
            if(source[i][1] < destination[i][1]):
                temp_y[0] = destination[i][1]
                temp_y[1] = source[i][1]
        if(temp_y[0] < temp_y[1]):
            ctr = 0
            while(ctr < (temp_x[1]-temp_x[0])+1):
                master_list[temp_y[0]+ctr][temp_x[0]+ctr] += 1
                ctr += 1
        if(temp_y[0] > temp_y[1]):
            x_ctr = temp_x[0]
            y_ctr = temp_y[0]
            while(x_ctr < temp_x[1]+1):
                master_list[y_ctr][x_ctr] += 1
                x_ctr += 1
                y_ctr -= 1   
                     
total_cross = 0
for i in range(0, len(master_list)):
    for j in range(0, len(master_list[0])):
        if(master_list[i][j] >= 2):
            total_cross += 1
print(total_cross)
